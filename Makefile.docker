# SPDX-License-Identifier: Apache-2.0
# Docker orchestration targets for GitMind C implementation

.PHONY: help build test clean install dev benchmark demo fuzz valgrind all

# Default target
help:
	@echo "GitMind C Implementation Commands:"
	@echo ""
	@echo "  make build        - Build the gitmind binary in Docker"
	@echo "  make test         - Run all tests in Docker"
	@echo "  make clean        - Clean build artifacts"
	@echo "  make install      - Install to /usr/local/bin"
	@echo "  make dev          - Open development shell in Docker"
	@echo "  make benchmark    - Run benchmarks in Docker"
	@echo ""
	@echo "Advanced targets:"
	@echo "  make demo         - Run demo repository setup"
	@echo "  make fuzz         - Run AFL++ fuzzing tests"
	@echo "  make valgrind     - Run Valgrind memory checks"
	@echo ""
	@echo "All operations run in Docker for consistency and safety."

# Build the binary in Docker
build:
	docker compose build dev
	docker compose run --rm dev sh -c "DOCKER_BUILD=1 make clean all"

# Run all tests in Docker
test:
	docker compose build test
	docker compose run --rm -T test

# Run tests in random order
test-random:
	docker compose build test
	RANDOM_TESTS=1 docker compose run --rm -T test

# Clean build artifacts
clean:
	docker compose down
	rm -f gitmind src/*.o

# Development shell
dev:
	docker compose run --rm dev

# Run benchmarks
benchmark:
	docker compose build benchmark
	docker compose run --rm benchmark

# Install locally (build first, then copy)
install: build
	@echo "Installing gitmind to /usr/local/bin..."
	@if [ -w /usr/local/bin ]; then \
		cp gitmind /usr/local/bin/; \
	else \
		echo "üîê Administrator access required..."; \
		sudo cp gitmind /usr/local/bin/; \
	fi
	@echo "‚úÖ Installation complete!"

# Run demo setup
demo:
	cd ../demos/mvp && ./test-demo.sh

# Run fuzz testing
fuzz:
	./tests/tools/fuzz-test.sh

# Run memory checks with Valgrind
valgrind:
	./tests/integration/valgrind-test.sh

# Multi-compiler strict testing
strict-test:
	docker compose run --rm dev ./tests/tools/test-multi-compiler.sh

# Convenience target to build and test
all: build test